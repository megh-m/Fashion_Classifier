# dvc.yaml
stages:
  setup_data:
    cmd: python -c "from torchvision.datasets import FashionMNIST; FashionMNIST('./data', download=True)"
    deps:
      - data
    outs:
      - FashionMNIST
    metrics:
      - metrics/initial_data_version.json:
          cache: false

  train_initial_model:
    cmd: python train.py --epochs 10 --batch-size 64 --learning-rate 0.001
    deps:
      - train.py
      - model.py
      - data/FashionMNIST
    params:
      - train.epochs
      - train.batch_size
      - train.learning_rate
    outs:
      - models/fashion_model.pth
    metrics:
      - metrics/initial_training_metrics.json:
          cache: false

  preprocess_user_data:
    cmd: python data_preprocessing.py
    deps:
      - preprocess_feedback.py
      - data/user-images
    outs:
      - data/processed_user_images
    metrics:
      - metrics/user_data_stats.json

  retrain_model:
    cmd: python retrain.py --min-images 20 --epochs 5 --batch-size 32 --learning-rate 0.0001
    deps:
      - retrain.py
      - data/processed_user_images
      - models/fashion_model.pth
    params:
      - retrain.min_images
      - retrain.epochs
      - retrain.batch_size
      - retrain.learning_rate
    outs:
      - models/retrained_model.pth
      - models/model_metadata.json
    metrics:
      - metrics/retraining_metrics.json

  dvc_push:
    cmd: dvc push
    deps:
      - data
      - models
      - metrics

  dvc_pull:
    cmd: dvc pull
    deps: []

artifacts:
  production_model:
    path: models/fashion_model.pth
    type: model
    desc: Production fashion classification model
    labels:
      - pytorch
      - cnn
    meta:
      input_shape: [1, 28, 28]
      classes: 10

metrics:
  - metrics/*.json

plots:
  - plots/accuracy_trends.png:
      x: timestamp
      y: accuracy
